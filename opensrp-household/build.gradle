description = 'Household module - a fork of OpenSRP family client library'

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

jacoco {
    // JaCoCo 0.8.10+ supports JDK 17
    toolVersion = "0.8.10"
}

android {

    // AGP 8 requires a namespace
    namespace 'org.smartregister.family'

    compileSdkVersion androidCompileSdkVersion

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
    // Remove deprecated dexOptions and use new lint block
    lint {
        abortOnError false
    }

    buildFeatures {
        buildConfig = true
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        resources {
            excludes += ['LICENSE.txt', 'META-INF/*']
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

allprojects {
    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        google()
        mavenCentral()
        mavenLocal()
    }
}

dependencies {
    // Updated dependencies (exposed transitively)
    api 'io.github.bluecodesystems:opensrp-client-native-form-new:3.1.3'
    api 'io.github.bluecodesystems:opensrp-client-utils:0.0.6'
    api 'io.github.bluecodesystems:opensrp-client-simprints:1.1.0'
    api 'com.simprints:libsimprints:2024.2.2'

    // Add OpenSRP core to provide commonregistry/view/cursoradapter APIs used throughout this module
    api('org.smartregister:opensrp-client-core:4.3.6-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.android.support'
        exclude group: 'org.apache.httpcomponents', module: 'httpmime'
        // Avoid duplicate classes with io.github.bluecodesystems:opensrp-client-utils
        exclude group: 'org.smartregister', module: 'opensrp-client-utils'
        // Exclude IBM FHIR libs that use MethodHandle (minSdk 26+ only)
        exclude group: 'com.ibm.fhir'
    }
    api('org.smartregister:opensrp-client-configurable-views:1.1.5-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        // Avoid duplicate classes with io.github.bluecodesystems:opensrp-client-utils
        exclude group: 'org.smartregister', module: 'opensrp-client-utils'
        // Exclude IBM FHIR libs that use MethodHandle (minSdk 26+ only)
        exclude group: 'com.ibm.fhir'
    }

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'de.hdodenhof:circleimageview:2.2.0'

    implementation 'com.google.guava:guava:28.0-android'

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    testImplementation 'org.mockito:mockito-inline:2.25.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.robolectric:shadows-multidex:4.3.1'
    // PowerMock
    def powerMockVersion = '2.0.0'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        // Gradle 7+/8+: 'enabled' was removed in favor of 'required'
        xml.required.set(true)
        html.required.set(true)
    }

    // Gradle 7+/8+: use outputLocation instead of deprecated setDestination
    reports.xml.outputLocation.set(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    reports.html.outputLocation.set(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories .from(files([debugTree]))
    executionData.from(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            if (variant.hasProperty('javaCompileProvider')) {
                // Android 3.3.0+
                owner.classpath += variant.javaCompileProvider.get().classpath
            } else {
                owner.classpath += variant.javaCompile.classpath
            }
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
    sourceDirs = ["$project.projectDir/src/main/java"]
}

version = "1.0.0-RELEASE"

def properties = new Properties()
properties.load(new FileInputStream(rootProject.file("local.properties")))

publishing {
    publications {
        Household(MavenPublication) {
            groupId 'org.smartregister'
            artifactId getArtifactId()
            version this.version
            artifact("$buildDir/outputs/aar/${getArtifactId()}-release.aar")
            artifact androidJavadocsJar
            artifact androidSourcesJar

            pom {
                name = 'Household module - a fork of OpenSRP Family module used to enroll entire household'
                description = ''
                url = 'https://github.com/BlueCodeSystems/opensrp-client-household'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
            //Refer to this gist https://gist.github.com/Robyer/a6578e60127418b380ca133a1291f017
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')

                ext.addDependency = { dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.transitive) {
                        // If this dependency is not transitive, we should force exclude all its dependencies from the POM
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { rule ->
                            final exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                // List all "implementation" dependencies (for old Gradle)
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "implementation") }
                // List all "api" dependencies (for new Gradle) as "implementation" dependencies
                configurations.api.getDependencies().each { dep -> addDependency(dep, "implementation") }
                // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /**
             * Configure path of the package repository on Github using the GITHUB_USER_ID and
             * Git Repository
             */
            url = uri("https://maven.pkg.github.com/BlueCodeSystems/opensrp-client-household")
            credentials {
                /** get credentials from local.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN otherwise
                 ** Set env variable GPR_USER & GPR_API_KEY**/

                username = properties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = properties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}
