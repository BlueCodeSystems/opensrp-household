description = 'Household module - a fork of OpenSRP family client library'

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.android.library'

jacoco {
    // JaCoCo 0.8.10+ supports JDK 17
    toolVersion = "0.8.10"
}

android {

    // AGP 8 requires a namespace
    namespace 'org.smartregister.family'

    compileSdk 35
    buildToolsVersion '35.0.0'

    compileOptions { sourceCompatibility JavaVersion.VERSION_1_8; targetCompatibility JavaVersion.VERSION_1_8 }

    defaultConfig {
        minSdk 28
        targetSdk 35
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        versionCode Integer.parseInt(project.findProperty('VERSION_CODE') ?: '1')
        versionName (project.findProperty('VERSION_NAME') ?: '1.0.0-SNAPSHOT')
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
    // Remove deprecated dexOptions and use new lint block
    lint {
        abortOnError false
    }

    buildFeatures {
        buildConfig = true
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packaging {
        resources {
            excludes += ['LICENSE.txt', 'META-INF/*', 'META-INF/ASL2.0', 'META-INF/INDEX.LIST']
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jvmArgs '-Xmx1024m'
                jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.net=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.text=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.security=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/sun.security.util=ALL-UNNAMED'
                jvmArgs '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED'
                jvmArgs '--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED'
                systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
                systemProperty 'robolectric.enabledSdks', '28'
            }
        }
    }

}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Repositories are defined at the root

dependencies {
    // Core OpenSRP libs (adjust versions)
    implementation('com.github.BlueCodeSystems:opensrp-client-core:v6.2.2') { transitive = true }
    implementation('io.github.bluecodesystems:opensrp-client-native-form-new:3.1.3') { transitive = true }
    implementation('io.github.bluecodesystems:opensrp-client-utils:0.0.6') { transitive = true }
    implementation('io.github.bluecodesystems:opensrp-plan-evaluator:1.7.0') { transitive = true }
    implementation('com.github.BlueCodeSystems:opensrp-client-configurable-views:v2.0.1') { transitive = true }

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'de.hdodenhof:circleimageview:2.2.0'

    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.google.guava:guava:32.1.3-android'
    implementation 'org.greenrobot:eventbus:3.3.1'

    // Unit test
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'androidx.sqlite:sqlite:2.3.1'
    testImplementation 'net.zetetic:android-database-sqlcipher:4.5.4'
    testImplementation 'org.powermock:powermock-reflect:2.0.9'

    // Instrumentation
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:rules:1.5.0'
}

// Jacoco report (modern DSL)
tasks.register('jacocoTestReport', JacocoReport) {
  dependsOn 'testDebugUnitTest'
  reports { xml.required = true; html.required = true; xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"); html.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/html") }
  def fileFilter = ['**/R.class','**/R$*.class','**/BuildConfig.*','**/Manifest*.*','**/*Test*.*','android/**/*.*','**/*$ViewBinder*.*']
  def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
  def mainSrc = "$project.projectDir/src/main/java"
  sourceDirectories.setFrom(files([mainSrc]))
  classDirectories.setFrom(files([debugTree]))
  executionData.setFrom(fileTree(dir: buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec']))
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            if (variant.hasProperty('javaCompileProvider')) {
                // Android 3.3.0+
                owner.classpath += variant.javaCompileProvider.get().classpath
            } else {
                owner.classpath += variant.javaCompile.classpath
            }
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

tasks.coveralls { dependsOn 'jacocoTestReport' }

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
    sourceDirs = ["$project.projectDir/src/main/java"]
}

apply from: '../maven.gradle'
